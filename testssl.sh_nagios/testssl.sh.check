#!/bin/bash

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export DOMAINS=/etc/ssl_domains.txt
export MYROOT=/var/lib/testssl
export PARALLEL=4
mkdir -p $MYROOT

function show_time () {
    local s=$1
    printf '%dd %02dh %02dm %02ds\n' $((s/86400)) $((s/3600%24)) $((s/60%60)) $((s%60))
}

function scan_parallel() {

cat  /etc/ssl_domains.txt | grep -Ev '(^$|^#)' | xargs -P$PARALLEL -n1 -ID -- bash -c "scan_domain D" 

}

function scan_domain() {

local DOMAIN=$1

local SCANCMD="timeout 900 /opt/testssl.sh/testssl.sh --fast --csv --csvfile $MYROOT/$DOMAIN.csv.tmp $DOMAIN"
# no cache:

        echo "==start scan $DOMAIN to  $MYROOT/$DOMAIN.raw.tmp "

        rm -f $MYROOT/$DOMAIN.csv.tmp 
        $SCANCMD > $MYROOT/$DOMAIN.raw.tmp && {

        mv $MYROOT/$DOMAIN.raw.tmp $MYROOT/$DOMAIN.raw
        mv $MYROOT/$DOMAIN.csv.tmp $MYROOT/$DOMAIN.csv
        echo "==done $DOMAIN"
        }
}

export -f scan_domain

####################

function check() {

STATUS=0

for DOMAIN in $( cat  /etc/ssl_domains.txt | grep -Ev '(^$|^#)' )
do
    if find $MYROOT/$DOMAIN.csv -cmin -720 2>/dev/null | grep -q . 
    then    
            
            TXT_DOMAIN=$( cat $MYROOT/$DOMAIN.csv | sed 1d  |grep -Ev 'INFO|OK|LUCKY13' | \
		grep -Ev 'HSTS|insecure_redirect|DNS_CAArecord|security_headers|OCSP_stapling|LOW|cipherlist_3DES|BEAST_CBC_TLS1' )
            if [[ -n $TXT_DOMAIN ]]
            then    STATUS=1
            else    TXT_DOMAIN=ok
            fi

	    SECONDS=$(( `date +%s`-`stat -c %Y $MYROOT/$DOMAIN.raw`)) ;
            TXT+="\n$DOMAIN checked $(show_time $SECONDS) ago:\n$TXT_DOMAIN\n"
    else    TXT+=" $DOMAIN not found or old status;\n"
            STATUS=1
    fi
done

echo "TESTSSL: "$( [ $STATUS == 0 ] && echo OK || echo WARN ): 
echo -e "$TXT"
exit $STATUS
}

################# 

if      [ "scan"  == "$1" ] ; then scan_parallel
elif    [ "check" == "$1" ] ; then check
else    echo "use scan or check"
fi


