#!/bin/bash

DOMAINS=/etc/ssl_domains.txt
MYROOT=/var/lib/ssllabs

which ssllabs-scan >/dev/null || { echo download ssllabs-scan ; exit ; }

function scan() {

mkdir -p $MYROOT

for DOMAIN in $( cat  /etc/ssl_domains.txt | grep -Ev '(^$|^#)' )
do
        echo ==$DOMAIN
        timeout 300 \
            ssllabs-scan -usecache  -maxage 1 -quiet -hostcheck  -verbosity error $DOMAIN > $MYROOT/$DOMAIN.raw.tmp
        mv  $MYROOT/$DOMAIN.raw.tmp $MYROOT/$DOMAIN.raw
        get_grade $MYROOT/$DOMAIN.raw 
done

}
####################

function get_grade () {
    cat $1 2>/dev/null | grep '"grade"' | cut -d: -f2 | cut -d\" -f2 
}

####################
function check() {

STATUS=0

for DOMAIN in $( cat  /etc/ssl_domains.txt | grep -Ev '(^$|^#)' )
do
    if find $MYROOT/$DOMAIN.raw -cmin -720 2>/dev/null | grep -q . 
    then    GRADE=$( get_grade $MYROOT/$DOMAIN.raw ) 
            HOURS=$(((`date +%s`-`stat -c %Y $MYROOT/$DOMAIN.raw`)/3600 )) ; 
            TXT+=" $DOMAIN grade $GRADE, checked $HOURS h ago;"
            echo "$GRADE" | grep -q -e "^A" || STATUS=1
    else    TXT+=" $DOMAIN not found or old status;"
            STATUS=1
    fi
done

echo "SSLLABS: "$( [ $STATUS == 0 ] && echo OK || echo WARN )": $TXT"
exit $STATUS
}

################# 

if      [ "scan"  == "$1" ] ; then $1
elif    [ "check" == "$1" ] ; then $1
else    echo "use scan or check"
fi


